package TLA.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import TLA.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.AntiSlashSlashExpr:
        return new AntiSlashSlashExpr_TextGen();
      case LanguageConceptSwitch.AntiSlashSlashExprList:
        return new AntiSlashSlashExprList_TextGen();
      case LanguageConceptSwitch.Assumption:
        return new Assumption_TextGen();
      case LanguageConceptSwitch.AxiomNode:
        return new AxiomNode_TextGen();
      case LanguageConceptSwitch.Case:
        return new Case_TextGen();
      case LanguageConceptSwitch.CaseArm:
        return new CaseArm_TextGen();
      case LanguageConceptSwitch.CharacterAt:
        return new CharacterAt_TextGen();
      case LanguageConceptSwitch.ChooseAndExpressions:
        return new ChooseAndExpressions_TextGen();
      case LanguageConceptSwitch.ConstantDeclaration:
        return new ConstantDeclaration_TextGen();
      case LanguageConceptSwitch.Except:
        return new Except_TextGen();
      case LanguageConceptSwitch.ExceptList:
        return new ExceptList_TextGen();
      case LanguageConceptSwitch.ExprAndGeneralInfixOpAndExpr:
        return new ExprAndGeneralInfixOpAndExpr_TextGen();
      case LanguageConceptSwitch.ExprAndGeneralPostfixOp:
        return new ExprAndGeneralPostfixOp_TextGen();
      case LanguageConceptSwitch.ExprAndXAndExpr:
        return new ExprAndXAndExpr_TextGen();
      case LanguageConceptSwitch.ExprTupleAndExpr:
        return new ExprTupleAndExpr_TextGen();
      case LanguageConceptSwitch.ExpressionBetweenParentheses:
        return new ExpressionBetweenParentheses_TextGen();
      case LanguageConceptSwitch.ExpressionTuple:
        return new ExpressionTuple_TextGen();
      case LanguageConceptSwitch.ExtendedModuleName:
        return new ExtendedModuleName_TextGen();
      case LanguageConceptSwitch.FunctionAndRange:
        return new FunctionAndRange_TextGen();
      case LanguageConceptSwitch.FunctionDefinition:
        return new FunctionDefinition_TextGen();
      case LanguageConceptSwitch.GeneralIdentifier:
        return new GeneralIdentifier_TextGen();
      case LanguageConceptSwitch.GeneralIdentifierAndArg:
        return new GeneralIdentifierAndArg_TextGen();
      case LanguageConceptSwitch.GeneralInfixOp:
        return new GeneralInfixOp_TextGen();
      case LanguageConceptSwitch.GeneralPostfixOp:
        return new GeneralPostfixOp_TextGen();
      case LanguageConceptSwitch.GeneralPrefixOp:
        return new GeneralPrefixOp_TextGen();
      case LanguageConceptSwitch.GeneralPrefixOpAndExpression:
        return new GeneralPrefixOpAndExpression_TextGen();
      case LanguageConceptSwitch.IDAndInfixOpAndID:
        return new IDAndInfixOpAndID_TextGen();
      case LanguageConceptSwitch.IDAndPostfixOp:
        return new IDAndPostfixOp_TextGen();
      case LanguageConceptSwitch.IdentifierList:
        return new IdentifierList_TextGen();
      case LanguageConceptSwitch.IdentifierNode:
        return new IdentifierNode_TextGen();
      case LanguageConceptSwitch.IdentifierNodeForChoose:
        return new IdentifierNodeForChoose_TextGen();
      case LanguageConceptSwitch.If:
        return new If_TextGen();
      case LanguageConceptSwitch.InfixOpNode:
        return new InfixOpNode_TextGen();
      case LanguageConceptSwitch.Instance:
        return new Instance_TextGen();
      case LanguageConceptSwitch.InstancePrefix:
        return new InstancePrefix_TextGen();
      case LanguageConceptSwitch.Let:
        return new Let_TextGen();
      case LanguageConceptSwitch.LocalFunctionDefinition:
        return new LocalFunctionDefinition_TextGen();
      case LanguageConceptSwitch.LocalInstance:
        return new LocalInstance_TextGen();
      case LanguageConceptSwitch.LocalModuleDefinition:
        return new LocalModuleDefinition_TextGen();
      case LanguageConceptSwitch.LocalOperatorDefinition:
        return new LocalOperatorDefinition_TextGen();
      case LanguageConceptSwitch.Module:
        return new Module_TextGen();
      case LanguageConceptSwitch.ModuleDefinition:
        return new ModuleDefinition_TextGen();
      case LanguageConceptSwitch.ModuleNameList:
        return new ModuleNameList_TextGen();
      case LanguageConceptSwitch.NameArrowExpr:
        return new NameArrowExpr_TextGen();
      case LanguageConceptSwitch.NameColonExpr:
        return new NameColonExpr_TextGen();
      case LanguageConceptSwitch.NonFixLHS:
        return new NonFixLHS_TextGen();
      case LanguageConceptSwitch.NumberNode:
        return new NumberNode_TextGen();
      case LanguageConceptSwitch.OpDeclList:
        return new OpDeclList_TextGen();
      case LanguageConceptSwitch.OpIdentifierNode:
        return new OpIdentifierNode_TextGen();
      case LanguageConceptSwitch.OperatorDefinition:
        return new OperatorDefinition_TextGen();
      case LanguageConceptSwitch.Other:
        return new Other_TextGen();
      case LanguageConceptSwitch.PointAndName:
        return new PointAndName_TextGen();
      case LanguageConceptSwitch.PostfixOpNode:
        return new PostfixOpNode_TextGen();
      case LanguageConceptSwitch.PostfixOpUnderscoreNode:
        return new PostfixOpUnderscoreNode_TextGen();
      case LanguageConceptSwitch.PrefixOpAndID:
        return new PrefixOpAndID_TextGen();
      case LanguageConceptSwitch.PrefixOpNode:
        return new PrefixOpNode_TextGen();
      case LanguageConceptSwitch.PrefixOpUnderscoreNode:
        return new PrefixOpUnderscoreNode_TextGen();
      case LanguageConceptSwitch.QuantifierAndIDListAndExpr:
        return new QuantifierAndIDListAndExpr_TextGen();
      case LanguageConceptSwitch.QuantifierBound:
        return new QuantifierBound_TextGen();
      case LanguageConceptSwitch.QuantifierBoundAndExpr:
        return new QuantifierBoundAndExpr_TextGen();
      case LanguageConceptSwitch.RangeExprAndExpr:
        return new RangeExprAndExpr_TextGen();
      case LanguageConceptSwitch.RangeExprImpliesExpr:
        return new RangeExprImpliesExpr_TextGen();
      case LanguageConceptSwitch.RangeExprList:
        return new RangeExprList_TextGen();
      case LanguageConceptSwitch.RangeNameArrowExpr:
        return new RangeNameArrowExpr_TextGen();
      case LanguageConceptSwitch.RangeNameExpr:
        return new RangeNameExpr_TextGen();
      case LanguageConceptSwitch.RangeQuantifierBoundAndExpr:
        return new RangeQuantifierBoundAndExpr_TextGen();
      case LanguageConceptSwitch.Separator:
        return new Separator_TextGen();
      case LanguageConceptSwitch.SetExpr:
        return new SetExpr_TextGen();
      case LanguageConceptSwitch.SetExprAndQuantifierBound:
        return new SetExprAndQuantifierBound_TextGen();
      case LanguageConceptSwitch.SetIDorTupleAndExpr:
        return new SetIDorTupleAndExpr_TextGen();
      case LanguageConceptSwitch.SingleInstancePrefix:
        return new SingleInstancePrefix_TextGen();
      case LanguageConceptSwitch.SlashAntiSlahExpr:
        return new SlashAntiSlahExpr_TextGen();
      case LanguageConceptSwitch.SlashAntiSlashExprList:
        return new SlashAntiSlashExprList_TextGen();
      case LanguageConceptSwitch.SquareAndCaseArm:
        return new SquareAndCaseArm_TextGen();
      case LanguageConceptSwitch.StringNode:
        return new StringNode_TextGen();
      case LanguageConceptSwitch.Substitution:
        return new Substitution_TextGen();
      case LanguageConceptSwitch.Theorem:
        return new Theorem_TextGen();
      case LanguageConceptSwitch.Tuple:
        return new Tuple_TextGen();
      case LanguageConceptSwitch.TupleForChoose:
        return new TupleForChoose_TextGen();
      case LanguageConceptSwitch.UnderscoreInfixOpUnderscoreNode:
        return new UnderscoreInfixOpUnderscoreNode_TextGen();
      case LanguageConceptSwitch.VariableDeclaration:
        return new VariableDeclaration_TextGen();
      case LanguageConceptSwitch.WForSF:
        return new WForSF_TextGen();
      case LanguageConceptSwitch.XandExpr:
        return new XandExpr_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Module$3n)) {
        String fname = getFileName_Module(root);
        String ext = getFileExtension_Module(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Module(SNode node) {
    return SPropertyOperations.getString(node, PROPS.ModuleName$iAUB).toString();
  }
  private static String getFileExtension_Module(SNode node) {
    return "tla";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Module$3n = MetaAdapterFactory.getConcept(0x7a6b8f83d2024e59L, 0x94ecf562edfca98dL, 0x66c514aade18245bL, "TLA.structure.Module");
  }

  private static final class PROPS {
    /*package*/ static final SProperty ModuleName$iAUB = MetaAdapterFactory.getProperty(0x7a6b8f83d2024e59L, 0x94ecf562edfca98dL, 0x66c514aade18245bL, 0x66c514aade19a4b0L, "ModuleName");
  }
}
