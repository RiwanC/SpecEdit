package TLA.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class PrefixOpNode_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    switch (SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.PrefixOp$QUQw).toString()) {
      case "Dash":
        tgs.append(" - ");
        break;
      case "Neg":
        tgs.append(" \\neg ");
        break;
      case "Square":
        tgs.append(" [] ");
        break;
      case "Diamond":
        tgs.append(" <> ");
        break;
      default:
        tgs.append(" ");
        tgs.append(SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.PrefixOp$QUQw).toString());
        tgs.append(" ");
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty PrefixOp$QUQw = MetaAdapterFactory.getProperty(0x7a6b8f83d2024e59L, 0x94ecf562edfca98dL, 0x674b5e52c6e1bd0cL, 0x674b5e52c6e1bd0dL, "PrefixOp");
  }
}
