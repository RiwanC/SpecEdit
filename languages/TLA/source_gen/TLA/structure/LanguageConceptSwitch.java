package TLA.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ABS_LHS = 0;
  public static final int AntiSlashSlashExpr = 1;
  public static final int AntiSlashSlashExprList = 2;
  public static final int Argument = 3;
  public static final int Assumption = 4;
  public static final int AxiomNode = 5;
  public static final int Case = 6;
  public static final int CaseArm = 7;
  public static final int CharacterAt = 8;
  public static final int ChooseAndExpressions = 9;
  public static final int ConstantDeclaration = 10;
  public static final int Definition = 11;
  public static final int Except = 12;
  public static final int ExceptInterface = 13;
  public static final int ExceptList = 14;
  public static final int ExprAndGeneralInfixOpAndExpr = 15;
  public static final int ExprAndGeneralPostfixOp = 16;
  public static final int ExprAndXAndExpr = 17;
  public static final int ExprTupleAndExpr = 18;
  public static final int Expression = 19;
  public static final int ExpressionBetweenParentheses = 20;
  public static final int ExpressionTuple = 21;
  public static final int ExtendedModuleName = 22;
  public static final int FunctionAndRange = 23;
  public static final int FunctionDefinition = 24;
  public static final int GeneralIdentifier = 25;
  public static final int GeneralIdentifierAndArg = 26;
  public static final int GeneralInfixOp = 27;
  public static final int GeneralPostfixOp = 28;
  public static final int GeneralPrefixOp = 29;
  public static final int GeneralPrefixOpAndExpression = 30;
  public static final int IDAndInfixOpAndID = 31;
  public static final int IDAndPostfixOp = 32;
  public static final int IDOrTupleOrIDList = 33;
  public static final int IdentifierList = 34;
  public static final int IdentifierNode = 35;
  public static final int IdentifierNodeForChoose = 36;
  public static final int IdentifierOrTuple = 37;
  public static final int IdentifierOrTupleForChoose = 38;
  public static final int If = 39;
  public static final int InfixOpNode = 40;
  public static final int Instance = 41;
  public static final int InstancePrefix = 42;
  public static final int Let = 43;
  public static final int LocalFunctionDefinition = 44;
  public static final int LocalInstance = 45;
  public static final int LocalModuleDefinition = 46;
  public static final int LocalOperatorDefinition = 47;
  public static final int Module = 48;
  public static final int ModuleDefinition = 49;
  public static final int ModuleNameList = 50;
  public static final int NameArrowExpr = 51;
  public static final int NameColonExpr = 52;
  public static final int NonFixLHS = 53;
  public static final int NumberNode = 54;
  public static final int OpDecl = 55;
  public static final int OpDeclList = 56;
  public static final int OpIdentifierNode = 57;
  public static final int OperatorDefinition = 58;
  public static final int Other = 59;
  public static final int PointAndName = 60;
  public static final int PostfixOpNode = 61;
  public static final int PostfixOpUnderscoreNode = 62;
  public static final int PrefixOpAndID = 63;
  public static final int PrefixOpNode = 64;
  public static final int PrefixOpUnderscoreNode = 65;
  public static final int QuantifierAndIDListAndExpr = 66;
  public static final int QuantifierBound = 67;
  public static final int QuantifierBoundAndExpr = 68;
  public static final int RangeExprAndExpr = 69;
  public static final int RangeExprImpliesExpr = 70;
  public static final int RangeExprList = 71;
  public static final int RangeNameArrowExpr = 72;
  public static final int RangeNameExpr = 73;
  public static final int RangeQuantifierBoundAndExpr = 74;
  public static final int Separator = 75;
  public static final int SetExpr = 76;
  public static final int SetExprAndQuantifierBound = 77;
  public static final int SetIDorTupleAndExpr = 78;
  public static final int SingleInstancePrefix = 79;
  public static final int SlashAntiSlahExpr = 80;
  public static final int SlashAntiSlashExprList = 81;
  public static final int SquareAndCaseArm = 82;
  public static final int StringNode = 83;
  public static final int Substitution = 84;
  public static final int Substitution_LHS = 85;
  public static final int Theorem = 86;
  public static final int Tuple = 87;
  public static final int TupleForChoose = 88;
  public static final int UnderscoreInfixOpUnderscoreNode = 89;
  public static final int Unit = 90;
  public static final int VariableDeclaration = 91;
  public static final int WForSF = 92;
  public static final int XandExpr = 93;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7a6b8f83d2024e59L, 0x94ecf562edfca98dL);
    builder.put(0x6b3146ab9a4f8aedL, ABS_LHS);
    builder.put(0x21a8433e0379585eL, AntiSlashSlashExpr);
    builder.put(0x21a8433e03795874L, AntiSlashSlashExprList);
    builder.put(0x674b5e52c6e1b6c1L, Argument);
    builder.put(0x674b5e52c6e1bd7bL, Assumption);
    builder.put(0x674b5e52c6e1bd85L, AxiomNode);
    builder.put(0x21a8433e037874f8L, Case);
    builder.put(0x21a8433e037874c1L, CaseArm);
    builder.put(0x2efc45b4e6202be4L, CharacterAt);
    builder.put(0x8a35484ed64645aL, ChooseAndExpressions);
    builder.put(0x2c221951c68d07c2L, ConstantDeclaration);
    builder.put(0x21a8433e0378fa0aL, Definition);
    builder.put(0x21a8433e037873d4L, Except);
    builder.put(0x21a8433e03787398L, ExceptInterface);
    builder.put(0x21a8433e0378739fL, ExceptList);
    builder.put(0x18704c9560fe4916L, ExprAndGeneralInfixOpAndExpr);
    builder.put(0x18704c9560fe493eL, ExprAndGeneralPostfixOp);
    builder.put(0x21a8433e03787457L, ExprAndXAndExpr);
    builder.put(0x7cf0730880a881b0L, ExprTupleAndExpr);
    builder.put(0x674b5e52c6e1bd5fL, Expression);
    builder.put(0x18704c9560fe4957L, ExpressionBetweenParentheses);
    builder.put(0x21a8433e03787414L, ExpressionTuple);
    builder.put(0x66c514aade19ce77L, ExtendedModuleName);
    builder.put(0x5c9787eb913d008eL, FunctionAndRange);
    builder.put(0x467903da84aac94eL, FunctionDefinition);
    builder.put(0x674b5e52c6e1bd63L, GeneralIdentifier);
    builder.put(0x467903da84c0bfdcL, GeneralIdentifierAndArg);
    builder.put(0x674b5e52c6e1bd61L, GeneralInfixOp);
    builder.put(0x674b5e52c6e1bd62L, GeneralPostfixOp);
    builder.put(0x674b5e52c6e1bd60L, GeneralPrefixOp);
    builder.put(0x467903da84c0c00dL, GeneralPrefixOpAndExpression);
    builder.put(0x467903da84aac87aL, IDAndInfixOpAndID);
    builder.put(0x467903da84aac8a8L, IDAndPostfixOp);
    builder.put(0x467903da84aac8f0L, IDOrTupleOrIDList);
    builder.put(0x43917a23f8d4d97cL, IdentifierList);
    builder.put(0x43917a23f8d4d96bL, IdentifierNode);
    builder.put(0x7551f37ec111f705L, IdentifierNodeForChoose);
    builder.put(0x467903da84aac8e1L, IdentifierOrTuple);
    builder.put(0x7551f37ec111f703L, IdentifierOrTupleForChoose);
    builder.put(0x21a8433e03787474L, If);
    builder.put(0x674b5e52c6e1bd1cL, InfixOpNode);
    builder.put(0x6b3146ab9a50d38bL, Instance);
    builder.put(0x674b5e52c6e1bd64L, InstancePrefix);
    builder.put(0x21a8433e0378fa13L, Let);
    builder.put(0x467903da84b2558eL, LocalFunctionDefinition);
    builder.put(0x6b3146ab9a528d19L, LocalInstance);
    builder.put(0x6b3146ab9a50c482L, LocalModuleDefinition);
    builder.put(0x467903da84b255a4L, LocalOperatorDefinition);
    builder.put(0x66c514aade18245bL, Module);
    builder.put(0x47bf6ca76cb568a0L, ModuleDefinition);
    builder.put(0x3f9c65b68f3e2c45L, ModuleNameList);
    builder.put(0x2efc45b4e6202b74L, NameArrowExpr);
    builder.put(0x21a8433e03787318L, NameColonExpr);
    builder.put(0x6b3146ab9a4f8b04L, NonFixLHS);
    builder.put(0x2efc45b4e6202bd5L, NumberNode);
    builder.put(0x66c514aade182459L, OpDecl);
    builder.put(0x47bf6ca76cb55cffL, OpDeclList);
    builder.put(0x47bf6ca76cb8eb86L, OpIdentifierNode);
    builder.put(0x467903da84aac83fL, OperatorDefinition);
    builder.put(0x21a8433e03787500L, Other);
    builder.put(0x21a8433e0378735dL, PointAndName);
    builder.put(0x674b5e52c6e1bd2cL, PostfixOpNode);
    builder.put(0x6b3146ab9a440761L, PostfixOpUnderscoreNode);
    builder.put(0x467903da84aac861L, PrefixOpAndID);
    builder.put(0x674b5e52c6e1bd0cL, PrefixOpNode);
    builder.put(0x6b3146ab9a436213L, PrefixOpUnderscoreNode);
    builder.put(0x18704c9560fe49d9L, QuantifierAndIDListAndExpr);
    builder.put(0x467903da84aac8c1L, QuantifierBound);
    builder.put(0x18704c9560fe4977L, QuantifierBoundAndExpr);
    builder.put(0x7cf0730880a8b269L, RangeExprAndExpr);
    builder.put(0x5c9787eb913d00f8L, RangeExprImpliesExpr);
    builder.put(0x21a8433e03787373L, RangeExprList);
    builder.put(0x2efc45b4e6202b94L, RangeNameArrowExpr);
    builder.put(0x21a8433e03787317L, RangeNameExpr);
    builder.put(0x5c9787eb913d00c1L, RangeQuantifierBoundAndExpr);
    builder.put(0x467903da84aac9a1L, Separator);
    builder.put(0x5c9787eb913321f3L, SetExpr);
    builder.put(0x5c9787eb913d004cL, SetExprAndQuantifierBound);
    builder.put(0x5c9787eb913cfd6eL, SetIDorTupleAndExpr);
    builder.put(0x674b5e52c6e1bde3L, SingleInstancePrefix);
    builder.put(0x21a8433e03795835L, SlashAntiSlahExpr);
    builder.put(0x21a8433e0379584bL, SlashAntiSlashExprList);
    builder.put(0x21a8433e037874e2L, SquareAndCaseArm);
    builder.put(0x2efc45b4e6202bc6L, StringNode);
    builder.put(0x6b3146ab9a50d87aL, Substitution);
    builder.put(0x674b5e52c6e1bd07L, Substitution_LHS);
    builder.put(0x674b5e52c6e1bd65L, Theorem);
    builder.put(0x467903da84aac8c2L, Tuple);
    builder.put(0x7551f37ec111f722L, TupleForChoose);
    builder.put(0x6b3146ab9a44077bL, UnderscoreInfixOpUnderscoreNode);
    builder.put(0x2c221951c68d06daL, Unit);
    builder.put(0x2c221951c68d0789L, VariableDeclaration);
    builder.put(0x6dd00814ec11c1fbL, WForSF);
    builder.put(0x21a8433e03787437L, XandExpr);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
